%function [verde, rojo, celeste, amarillo, morado, naranja] = color_icono(icono)
function [color] = color_icono(icono)

    function [BW,maskedRGBImage] = createMask(RGB, channels_limits)
    %createMask  Threshold RGB image using auto-generated code from colorThresholder app.
    %  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
    %  auto-generated code from the colorThresholder app. The colorspace and
    %  range for each channel of the colorspace were set within the app. The
    %  segmentation mask is returned in BW, and a composite of the mask and
    %  original RGB images is returned in maskedRGBImage.

    % Auto-generated by colorThresholder app on 31-Dec-2020
    %------------------------------------------------------

    % Convert RGB image to chosen color space
    I = rgb2hsv(RGB);
    %I=RGB;

    % Define thresholds for channel 1 based on histogram settings
    channel1Min = channels_limits(1);
    channel1Max = channels_limits(2);

    % Define thresholds for channel 2 based on histogram settings
    channel2Min = channels_limits(3);
    channel2Max = channels_limits(4);

    % Define thresholds for channel 3 based on histogram settings
    channel3Min = channels_limits(5);
    channel3Max = channels_limits(6);

    % Create mask based on chosen histogram thresholds
    sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
        (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
        (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
    BW = sliderBW;

    % Initialize output masked image based on input image.
    maskedRGBImage = RGB;

    % Set background pixels where BW is false to zero.
    maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

    end
% para RGB
% channels_limits_verde=[34.000 65.000 62.000 100.000 16.000 46.000];
% channels_limits_rojo=[97.000 130.000 8.000 45.000 12.000 50.000];
% channels_limits_celeste=[20.000 75.000 77.000 116.000 114.000 151.000];
% channels_limits_amarillo=[112.000 138.000 88.000 122.000 21.000 66.000];    
% channels_limits_morado=[69.000 100.000 43.000 66.000 62.000 100.000];
% channels_limits_naranja=[92.000 139.000 26.000 75.000 14.000 46.000];

% % para HSV
channels_limits_verde=[0.264 0.360 0.230 0.610 0.124 0.415];
channels_limits_rojo=[0.979 0.000 0.648 0.794 0.470 0.509];
channels_limits_celeste=[0.556 0.615 0.408 0.568 0.415 0.638];
channels_limits_amarillo=[0.115 0.145 0.495 0.805 0.488 0.564];    
channels_limits_morado=[0.748 0.876 0.226 0.436 0.275 0.394];
channels_limits_naranja=[0.027 0.051 0.618 0.746 0.456 0.629];



[BW,maskedRGBImage] = createMask(icono,channels_limits_verde);
verde=any(BW(:));

[BW,maskedRGBImage] = createMask(icono,channels_limits_rojo);
rojo=any(BW(:));

[BW,maskedRGBImage] = createMask(icono,channels_limits_celeste);
celeste=any(BW(:));

[BW,maskedRGBImage] = createMask(icono,channels_limits_amarillo);
amarillo=any(BW(:));

[BW,maskedRGBImage] = createMask(icono,channels_limits_morado);
morado=any(BW(:));

[BW,maskedRGBImage] = createMask(icono,channels_limits_naranja);
naranja=any(BW(:));

color=[verde, rojo, celeste, amarillo, morado, naranja];
end